package framework.generic.dao;

import java.io.Serializable;
import java.lang.reflect.ParameterizedType;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.CriteriaSpecification;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projection;
import org.hibernate.criterion.Projections;
import org.hibernate.impl.CriteriaImpl;
import org.hibernate.transform.ResultTransformer;
import org.springframework.orm.hibernate3.HibernateTemplate;
import org.springside.modules.utils.reflection.ReflectionUtils;

import framework.generic.exception.DataAccessException;
import framework.generic.page.Pagination;

public abstract class CopyOfGenericHibernateDaoImpl<T extends Serializable, PK extends Serializable> implements GenericHibernateDao<T, PK> {

	private final Class<?> entityClass;

	private SessionFactory sessionFactory;
	private final String HQL_LIST_ALL;
	private final String HQL_COUNT_ALL;

	@Resource
	public void setSessionFactory(SessionFactory sessionFactory) {
		this.sessionFactory = sessionFactory;
	}

	/**
	 * 获取当前的session
	 */
	private Session getCurrentSession() {
		return sessionFactory.getCurrentSession();
	}

	public CopyOfGenericHibernateDaoImpl() {
		this.entityClass = (Class<?>) ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[0];
		HQL_LIST_ALL = "FROM " + this.entityClass.getSimpleName();
		HQL_COUNT_ALL = "SELECT COUNT(*) FROM " + this.entityClass.getSimpleName();
	}

	public CopyOfGenericHibernateDaoImpl(SessionFactory sessionFactory, Class<T> entityClass) {
		this.setSessionFactory(sessionFactory);
		this.entityClass = entityClass;
		HQL_LIST_ALL = "FROM " + this.entityClass.getSimpleName();
		HQL_COUNT_ALL = "SELECT COUNT(*) FROM " + this.entityClass.getSimpleName();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see framework.generic.dao.GenericDao#read()
	 */
	@Override
	public List<T> read() throws DataAccessException {
		Query query = getCurrentSession().createQuery(HQL_LIST_ALL);
		return (List<T>) query.list();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see framework.generic.dao.GenericDao#read(int, int)
	 */
	@Override
	public List<T> read(int pageNo, int pageSize) throws DataAccessException {
		Query query = getCurrentSession().createQuery(HQL_LIST_ALL);
		if (pageNo >= 0) {
			query.setFirstResult(pageNo);
		}
		if (pageSize > 0) {
			query.setMaxResults(pageSize);
		}
		return (List<T>) query.list();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see framework.generic.dao.GenericHibernateDao#findPage(java.lang.String, int, int, java.lang.Object[])
	 */
	@Override
	public Pagination<T> findPage(String hql, int pageNo, int pageSize, Object... paramList) throws DataAccessException {
		Query query = getCurrentSession().createQuery(hql);
		if (pageNo >= 0) {
			query.setFirstResult(pageNo);
		}
		if (pageSize > 0) {
			query.setMaxResults(pageSize);
		}
		if (paramList != null) {
			for (int i = 0; i < paramList.length; i++) {
				if (paramList[i] instanceof Date) {
					query.setTimestamp(i, (Date) paramList[i]);
				} else {
					query.setParameter(i, paramList[i]);
				}
			}
		}
		return new Pagination<T>(pageNo, pageSize, Long.valueOf(getCount(hql, paramList)), (List<T>) query.list());
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see framework.generic.dao.GenericHibernateDao#findPage(java.lang.String, int, int, java.lang.String[], java.lang.Object[])
	 */
	@Override
	public Pagination<T> findPage(String hql, int pageNo, int pageSize, String[] paramNames, Object[] values) throws DataAccessException {
		Query query = getCurrentSession().createQuery(hql);
		if (pageNo >= 0) {
			query.setFirstResult(pageNo);
		}
		if (pageSize > 0) {
			query.setMaxResults(pageSize);
		}
		if (paramNames != null && values != null && (paramNames.length == values.length)) {
			for (int i = 0; i < paramNames.length; i++) {
				query.setParameter(paramNames[i], values[i]);
			}
		}
		return new Pagination<T>(pageNo, pageSize, Long.valueOf(getCount(hql, paramNames, values)), (List<T>) query.list());
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see framework.generic.dao.GenericDao#getCount(java.lang.String, java.lang.Object[])
	 */
	@Override
	public int getCount(String hql, Object... paramList) {
		Query query = getCurrentSession().createQuery(hql);
		if (paramList != null) {
			for (int i = 0; i < paramList.length; i++) {
				if (paramList[i] instanceof Date) {
					query.setTimestamp(i, (Date) paramList[i]);
				} else {
					query.setParameter(i, paramList[i]);
				}
			}
		}
		return ((Integer) query.uniqueResult()).intValue();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see framework.generic.dao.GenericDao#getCount(java.lang.String, java.lang.String[], java.lang.Object[])
	 */
	@Override
	public int getCount(String hql, final String[] paramNames, final Object[] values) {
		Query query = getCurrentSession().createQuery(hql);
		if (paramNames != null && values != null && (paramNames.length == values.length)) {
			for (int i = 0; i < paramNames.length; i++) {
				query.setParameter(paramNames[i], values[i]);
			}
		}
		return Integer.valueOf((String.valueOf(query.uniqueResult())));
	}
	
	/**
	 * 执行count查询获得本次Hql查询所能获得的对象总数.
	 * 
	 * 本函数只能自动处理简单的hql语句,复杂的hql查询请另行编写count语句查询.
	 */
	protected long countHqlResult(final String hql, final Map<String, ?> values) {
		String countHql = prepareCountHql(hql);

		try {
			Long count = getCount(countHql, values);
			return count;
		} catch (Exception e) {
			throw new RuntimeException("hql can't be auto count, hql is:" + countHql, e);
		}
	}

	private String prepareCountHql(String orgHql) {
		String fromHql = orgHql;
		//select子句与order by子句会影响count查询,进行简单的排除.
		fromHql = "from " + StringUtils.substringAfter(fromHql, "from");
		fromHql = StringUtils.substringBefore(fromHql, "order by");

		String countHql = "select count(*) " + fromHql;
		return countHql;
	}

	/**
	 * 执行count查询获得本次Criteria查询所能获得的对象总数.
	 */
	@SuppressWarnings("unchecked")
	protected long countCriteriaResult(final Criteria c) {
		CriteriaImpl impl = (CriteriaImpl) c;

		// 先把Projection、ResultTransformer、OrderBy取出来,清空三者后再执行Count操作
		Projection projection = impl.getProjection();
		ResultTransformer transformer = impl.getResultTransformer();

		List<CriteriaImpl.OrderEntry> orderEntries = null;
		try {
			orderEntries = (List) ReflectionUtils.getFieldValue(impl, "orderEntries");
			ReflectionUtils.setFieldValue(impl, "orderEntries", new ArrayList());
		} catch (Exception e) {
			logger.error("不可能抛出的异常:{}", e.getMessage());
		}

		// 执行Count查询
		Long totalCountObject = (Long) c.setProjection(Projections.rowCount()).uniqueResult();
		long totalCount = (totalCountObject != null) ? totalCountObject : 0;

		// 将之前的Projection,ResultTransformer和OrderBy条件重新设回去
		c.setProjection(projection);

		if (projection == null) {
			c.setResultTransformer(CriteriaSpecification.ROOT_ENTITY);
		}
		if (transformer != null) {
			c.setResultTransformer(transformer);
		}
		try {
			ReflectionUtils.setFieldValue(impl, "orderEntries", orderEntries);
		} catch (Exception e) {
			logger.error("不可能抛出的异常:{}", e.getMessage());
		}

		return totalCount;
	}


	/*
	 * (non-Javadoc)
	 * 
	 * @see framework.generic.dao.GenericDao#getTotalCount()
	 */
	@Override
	public int getTotalCount() {
		return getCount("SELECT COUNT(*) FROM " + this.entityClass.getSimpleName());
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see framework.generic.dao.GenericDao#get(java.io.Serializable)
	 */
	@Override
	public T get(PK parmaryKey) {
		return (T) getCurrentSession().get(entityClass, parmaryKey);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see framework.generic.dao.GenericDao#save(java.io.Serializable)
	 */
	@Override
	public T save(T entity) {
		Serializable pk = getCurrentSession().save(entity);
		return (T) getCurrentSession().get(entityClass, pk);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see framework.generic.dao.GenericDao#saveAll(java.util.Collection)
	 */
	@Override
	public void saveAll(Collection<T> entities) {
		if (entities != null && !entities.isEmpty()) {
			for (T entity : entities) {
				getCurrentSession().save(entity);
			}
		}

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see framework.generic.dao.GenericDao#saveOrUpdate(java.io.Serializable)
	 */
	@Override
	public T saveOrUpdate(T entity) {
		if (entity != null) {
			getCurrentSession().saveOrUpdate(entity);
		}
		return entity;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see framework.generic.dao.GenericDao#saveOrUpdateAll(java.util.Collection)
	 */
	@Override
	public void saveOrUpdateAll(Collection<T> entities) {
		if (entities != null && !entities.isEmpty()) {
			for (T entity : entities) {
				getCurrentSession().saveOrUpdate(entity);
			}
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see framework.generic.dao.GenericDao#update(java.io.Serializable)
	 */
	@Override
	public T update(T entity) {
		if (entity != null) {
			getCurrentSession().update(entity);
		}
		return entity;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see framework.generic.dao.GenericDao#updateAll(java.util.Collection)
	 */
	@Override
	public void updateAll(Collection<T> entities) {
		if (entities != null && !entities.isEmpty()) {
			for (T entity : entities) {
				getCurrentSession().update(entity);
			}
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see framework.generic.dao.GenericDao#deleteByPK(java.io.Serializable)
	 */
	@Override
	public void deleteByPK(PK parmaryKey) {
		T entity = null;
		if (parmaryKey != null) {
			entity = (T) getCurrentSession().get(entityClass, parmaryKey);
		}
		if (entity != null) {
			getCurrentSession().delete(entity);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see framework.generic.dao.GenericDao#delete(java.io.Serializable)
	 */
	@Override
	public void delete(T entity) {
		if (entity != null) {
			getCurrentSession().delete(entity);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see framework.generic.dao.GenericDao#deleteAll(java.util.Collection)
	 */
	@Override
	public void deleteAll(Collection<T> entities) {
		if (entities != null && !entities.isEmpty()) {
			for (T entity : entities) {
				getCurrentSession().delete(entity);
			}
		}

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see framework.generic.dao.GenericHibernateDao#find(java.lang.String)
	 */
	@Override
	public List<T> find(String hql) {
		return find(hql, (Object[]) null);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see framework.generic.dao.GenericHibernateDao#find(java.lang.String, java.lang.Object[])
	 */
	@Override
	public List<T> find(String hql, Object... paramList) {
		Query query = getCurrentSession().createQuery(hql);
		if (paramList != null) {
			for (int i = 0; i < paramList.length; i++) {
				if (paramList[i] instanceof Date) {
					query.setTimestamp(i, (Date) paramList[i]);
				} else {
					query.setParameter(i, paramList[i]);
				}
			}
		}
		return (List<T>) query.list();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see framework.generic.dao.GenericHibernateDao#findByNamedParam(java.lang.String, java.lang.String, java.lang.Object)
	 */
	@Override
	public List<T> findByNamedParam(String hql, String paramName, Object value) {
		return findByNamedParam(hql, new String[] { paramName }, new Object[] { value });
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see framework.generic.dao.GenericHibernateDao#findByNamedParam(java.lang.String, java.lang.String[], java.lang.Object[])
	 */
	@Override
	public List<T> findByNamedParam(String hql, String[] paramNames, Object[] values) {
		Query query = getCurrentSession().createQuery(hql);
		if (paramNames != null && values != null && (paramNames.length == values.length)) {
			for (int i = 0; i < paramNames.length; i++) {
				query.setParameter(paramNames[i], values[i]);
			}
		}
		return (List<T>) query.list();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see framework.generic.dao.GenericHibernateDao#findByCriteria(org.hibernate.criterion.DetachedCriteria)
	 */
	@Override
	public List<T> findByCriteria(DetachedCriteria criteria) {
		return findByCriteria(criteria, -1, -1);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see framework.generic.dao.GenericHibernateDao#findByCriteria(org.hibernate.criterion.DetachedCriteria, int, int)
	 */
	@Override
	public List<T> findByCriteria(DetachedCriteria criteria, int pageNo, int pageSize) {
		Criteria executableCriteria = criteria.getExecutableCriteria(getCurrentSession());
		if (pageNo >= 0) {
			executableCriteria.setFirstResult(pageNo);
		}
		if (pageSize > 0) {
			executableCriteria.setMaxResults(pageSize);
		}
		return (List<T>) executableCriteria.list();
	}

	@Override
	public Pagination<T> findPageByCriteria(DetachedCriteria criteria, int pageNo, int pageSize) {
		return new Pagination<T>(pageNo, pageSize, Long.valueOf(getCountByCriteria(criteria)), findByCriteria(criteria, pageNo, pageSize));
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see framework.generic.dao.GenericHibernateDao#getCountByCriteria(org.hibernate.Criteria)
	 */
	@Override
	public int getCountByCriteria(DetachedCriteria criteria) {
		Criteria executableCriteria = criteria.getExecutableCriteria(getCurrentSession());
		return (Integer) executableCriteria.uniqueResult();
	}
}
